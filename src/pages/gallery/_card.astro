---
import Button from "@/components/ui/Button.astro";
import Typography from "@/components/ui/Typography.astro";
import type { CardInfo } from "@/lib/model/common.type";

type Props = CardInfo & { class: string };

const CARD_WIDTH_RATIO = 5;

function calcImgHeightRatio(cardInfo: CardInfo) {
  return Math.round(
    (cardInfo.img.height / cardInfo.img.width) * CARD_WIDTH_RATIO
  );
}

function calcCardHeightRatio(cardInfo: CardInfo) {
  return calcImgHeightRatio(cardInfo) + (cardInfo.href == undefined ? 0 : 1);
}

const {
  date,
  img,
  title,
  href,
  hrefText,
  author,
  class: className,
} = Astro.props;
const dtString = date.toLocaleDateString("default", {
  year: "numeric",
  month: "long",
});

const imgHeightRatio = calcImgHeightRatio(Astro.props);
const cardHeightRatio = calcCardHeightRatio(Astro.props);
---

<div
  class:list={[className, "card-container"]}
  data-height={`${cardHeightRatio}`}
>
  <a href={href} target="_blank" rel="noopener noreferrer">
    <div class="card-imgContainer">
      <img src={img.url} alt={title} />
      <div class="card-info">
        <Typography variant="code" as="span">{title}</Typography>
        <span style={{ flex: "1 1" }}></span>
        <div>
          <Typography variant="code" as="span">{dtString}</Typography>
          <span style={{ flex: "1 1" }}></span>
          <Typography variant="code" as="span">by {author}</Typography>
        </div>
      </div>
    </div>
    {
      href != undefined && (
        <Button class={"card-button"}>
          <span class="card-button-content">

          {hrefText}
          <svg
            height="13"
            stroke-linejoin="round"
            viewBox="0 0 16 16"
            width="13"
            >
            <path
              fill-rule="evenodd"
              clip-rule="evenodd"
              d="M9.53033 2.21968L9 1.68935L7.93934 2.75001L8.46967 3.28034L12.4393 7.25001H1.75H1V8.75001H1.75H12.4393L8.46967 12.7197L7.93934 13.25L9 14.3107L9.53033 13.7803L14.6036 8.70711C14.9941 8.31659 14.9941 7.68342 14.6036 7.2929L9.53033 2.21968Z"
              fill="currentColor"
              />
          </svg>
              </span>
        </Button>
      )
    }
  </a>
</div>

<style
  define:vars={{ "img-height": imgHeightRatio, "card-width": CARD_WIDTH_RATIO }}
>
  .card-container {
    --border-padding: 4px;
    border: 1px solid rgb(var(--color-default-foreground));
    padding: var(--border-padding);
    border-radius: calc(var(--size-border-radius) + var(--border-padding));
  }

  .card-imgContainer {
    position: relative;
    width: 100%;
    aspect-ratio: var(--card-width) / var(--img-height);
    border-radius: var(--size-border-radius);
    overflow: hidden;

    & > img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform var(--transition-short);

      .card-container:hover & {
        transform: scale(125%);
      }
    }
  }
  .card-info {
    position: absolute;
    inset: 0;
    display: flex;
    flex-direction: column;
    padding: calc(var(--spacing-paragraph) / 2);

    background-image: linear-gradient(
      to bottom,
      rgb(var(--color-default-background) / 65%) 5%,
      transparent 25%,
      transparent 75%,
      rgb(var(--color-default-background) / 65%) 95%
    );

    & span {
      text-wrap: nowrap;
    }
    & > div {
      display: flex;
      flex-direction: row;
    }
  }

  :global(.card-button) {
    & .card-button-content {
      display: flex;
      box-sizing: border-box;
      width: 100%;
      align-items: center;
      justify-content: center;
      gap: calc(var(--spacing-paragraph) / 2);
    }

    margin-top: var(--border-padding);
    border-radius: var(--size-border-radius);
  }
</style>
